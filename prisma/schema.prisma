generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  image         String? // next-auth アダプターが渡すフィールド名
  emailVerified DateTime? // next-auth アダプターが渡すフィールド名
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role?         @default(USER)
  mapImages     MapImage[]
  mapLocations  MapLocation[]
  Account       Account[]
  Session       Session[]
}

model MapLocation {
  id          String     @id @default(cuid())
  name        String
  lat         Float
  lng         Float
  description String?
  userId      String
  createdAt   DateTime   @default(now())
  mapImages   MapImage[]
  user        User       @relation(fields: [userId], references: [id])
}

model MapImage {
  id             String        @id @default(cuid())
  eventName      String
  mapLocationId  String
  imageUrl       String
  routedImageUrl String?
  date           DateTime
  comment        String
  memo           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  terrainType    terrainType   @default(FOREST)
  mapLocation    MapLocation   @relation(fields: [mapLocationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  tags           MapImageTag[]
}

model Tag {
  id          String        @id @default(cuid())
  name        String        @unique
  MapImageTag MapImageTag[]
}

model MapImageTag {
  mapImageId String
  tagId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  mapImage   MapImage @relation(fields: [mapImageId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([mapImageId, tagId])
}

enum Role {
  USER
  ADMIN
}

enum terrainType {
  SPRINT
  FOREST
}
